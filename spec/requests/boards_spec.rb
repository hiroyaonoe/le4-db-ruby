require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/boards", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Board. As you add validations to Board, be sure to
  # adjust the attributes here as well.
  let(:member1) { create(:user, :member) }
  let(:member2) { create(:user, :member) }
  let(:admin1) { create(:user, :admin) }
  let(:owner1) { create(:user, :owner) }
  let(:valid_attributes) {
    attributes_for(:board, user_id: member1.id, category_id: create(:category).id)
  }
  let(:invalid_attributes) {
    attributes_for(:board)
  }
  let(:tag_text) {
    [create(:tag).name, create(:tag).name, create(:tag).name].join(" ")
  }

  describe "GET /show" do
    it "renders a successful respoboard_nse" do
      board = Board.create! valid_attributes
      get board_url(board)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "when logined" do
      before(:each) do
        sign_in member1
      end

      context "with valid parameters" do
        context "with existing tags" do
          it "creates a new Board" do
            expect {
              post boards_url, params: { board: valid_attributes.merge(tag_text: tag_text) }
            }.to change(Board, :count).by(1)
          end

          it "redirects to the created board" do
            post boards_url, params: { board: valid_attributes.merge(tag_text: tag_text) }
            expect(response).to redirect_to(board_url(Board.last))
          end
        end

        context "with new tags" do
          it "creates a new Board" do
            expect {
              post boards_url, params: { board: valid_attributes.merge(tag_text: "new-tag1 new-tag2") }
            }.to change(Board, :count).by(1)
          end

          it "redirects to the created board" do
            post boards_url, params: { board: valid_attributes.merge(tag_text: "new-tag1 new-tag2") }
            expect(response).to redirect_to(board_url(Board.last))
          end
        end
      end

      context "with invalid parameters" do
        it "does not create a new Board" do
          expect {
            post boards_url, params: { board: invalid_attributes.merge(tag_text: tag_text) }
          }.to change(Board, :count).by(0)
        end

        it "renders a successful response (i.e. to display the 'new' template)" do
          post boards_url, params: { board: invalid_attributes.merge(tag_text: tag_text) }
          expect(response).to have_http_status :unprocessable_entity
        end
      end
    end

    context "when not logined" do
      context "with valid parameters" do
        it "does not create a new Board" do
          expect {
            post boards_url, params: { board: valid_attributes.merge(tag_text: tag_text) }
          }.to change(Board, :count).by(0)
        end

        it "redirects to the login" do
          post boards_url, params: { board: valid_attributes.merge(tag_text: tag_text) }
          expect(response).to redirect_to(new_user_session_url)
        end
      end
    end
  end

  describe "DELETE /destroy" do
    context "when current user has the board" do
      before(:each) do
        sign_in member1
      end
      it "destroys the requested boaboard_rd" do
        board = Board.create! valid_attributes
        expect {
          delete board_url(board)
        }.to change(Board, :count).by(-1)
      end

      it "redirects to the boards liboard_st" do
        board = Board.create! valid_attributes
        delete board_url(board)
        expect(response).to redirect_to(boards_url)
      end
    end

    context "when current user has not the board" do
      before(:each) do
        sign_in member2
      end
      it "does not destroy the requested board" do
        board = Board.create! valid_attributes
        expect {
          delete board_url(board)
        }.to change(Board, :count).by(0)
      end

      it "return a 401 response" do
        board = Board.create! valid_attributes
        delete board_url(board)
        expect(response).to have_http_status :unauthorized
      end
    end

    context "when current user is admin" do
      before(:each) do
        sign_in admin1
      end
      it "destroys the requested board" do
        board = Board.create! valid_attributes
        expect {
          delete board_url(board)
        }.to change(Board, :count).by(-1)
      end

      it "redirects to the boards list" do
        board = Board.create! valid_attributes
        delete board_url(board)
        expect(response).to redirect_to(boards_url)
      end
    end

    context "when current user is owner" do
      before(:each) do
        sign_in owner1
      end
      it "destroys the requested board" do
        board = Board.create! valid_attributes
        expect {
          delete board_url(board)
        }.to change(Board, :count).by(-1)
      end

      it "redirects to the boards list" do
        board = Board.create! valid_attributes
        delete board_url(board)
        expect(response).to redirect_to(boards_url)
      end
    end
  end
end
